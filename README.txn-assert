
TXN assert

Normal assertations and other faults do not work inside transactions. 
That is they abort the transaction and will be reexecuted. But if 
the problem only happens during the transaction itself they will never be 
visible.

This library implements a simple TXN_ASSERT() facility that uses
XABORT to communicate a failure to outside the transaction.

	#include "txn-assert.h"

	TXN_ASSERT(condition);
	TXN_ASSERT_ONLY(condition);

TXN_ASSERT_ONLY() can be used to only assert inside a transaction
(TXN_ASSERT() will assert outside too)

To build it requires running the assign-xabort.py script over all
the object files that use TXN_ASSERT*. The script has to be called
with all files on the command line to assign global assert numbers.
The object files have to be compiled with -g. The script modifies
the object files, so this has to be done before linking.

This generates a new file with the assert that should be linked into the 
program along with txn-assert.c

It requires the TSX library (like glibc) to support calling
an abort hook with __tsx_set_abort_hook().

The final execute has to be linked with -ldl

Code that implements own transactions can call txn_assert_abort_hook(status)
from its abort handler to make assertations work.

REQUIREMENTS:
binutils (objdump) with TSX support installed
glibc with __tsx_set_abort_hook() support

LIMITATIONS:
Fixable:
Can be only called when the CPU supports TSX. No CPUID check so far.
Only 254 unique asserts supported
ELF object files

Unfixable:
Only works for RTM transactions.

